#!/bin/bash
# ==============================================================================
# Version       : 0.1
# Date          : 2017/03/30
# Last updated  : 2017/03/30
# Autor         : Alexandre Bray
# Information   : support@opendoc.net 
# GIT URL       : https://github.com/opendocnet/elk/blob/master/check_elasticsearch_stats
# GIT REVISION  : 21
# Revision :
#   0.1 : first version (rev 21)
# ==============================================================================

# ------------------------------------------------------------------------------
# VARIABLES
# ------------------------------------------------------------------------------
Tmp="/var/tmp"
Node=`grep node.name: /etc/elasticsearch/elasticsearch.yml | awk -F'"' '{print $2}'`
Port=`grep http.port: /etc/elasticsearch/elasticsearch.yml | awk '{print $2}'`

# ------------------------------------------------------------------------------
# FUNCTIONS 
# ------------------------------------------------------------------------------
#> Print usage
usage () {
    echo " Usage: `basename $0` -s <stats> -w <warning> -c <critical>"
    echo ""
    echo "  -s  stats :  indexing / merge / search / refresh / flush"
    echo "  -w  warning"
    echo "  -c  critical"
    echo "  -h  help : show help"
    echo ""
}

#> Process command line options
doopts() {
    if ( `test 0 -lt $#` ); then
        while getopts s:w:c:h myarg "$@" ; do
            case $myarg in
                h)
                    usage
                    exit;;
                s)
                    Stats=$OPTARG;;
                w)
                    Warning=$OPTARG;;
                c)
                    Critical=$OPTARG;;
                *)
                    usage
                    exit;;
            esac
        done
    else
        usage
        exit
    fi
}

#> Write output and return result
function_output () {
    
    if [ $(echo "${Result} < ${Warning}" | bc -l) -eq 1 ] ; then
         
        echo "OK : ${Stats} = ${Result}ms (w=${Warning}, c=${Critical})|result=${Result};${Warning};${Critical};0"
        exit 0
        
    elif [ $(echo "${Result} < ${Critical}" | bc -l) -eq 1 ] ; then
         
        echo "WARNING : ${Stats} = ${Result}ms (w=${Warning}, c=${Critical})|result=${Result};${Warning};${Critical};0" 
        exit 1
     
    else [ $(echo "${Result} > ${Critical}" | bc -l) -eq 1 ]
         
        echo "Critical : ${Stats} = ${Result}ms (w=${Warning}, c=${Critical})|result=${Result};${Warning};${Critical};0"
        exit 2
        
    fi

}

function_stats_indexing () {

    ESstats="$(curl -XGET 'http://127.0.0.1:'${Port}'/_nodes/'${Node}'/stats/indices/'${Stats}'?pretty=true' 2>/dev/null)"
    Total="$(echo -e "${ESstats}" | grep "index_total" | tail -n 1 | awk '{print $3}' | sed 's/,//')"
    Time="$(echo -e "${ESstats}" | grep "index_time_in_millis" | tail -n 1 | awk '{print $3}' | sed 's/,//')"

    test -s ${Tmp}/buffer_${Node}_${Stats}
    if [ "$?" != "0" ]; then
        echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
        echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
        echo "Buffer in progress..."
        exit 3
        
    fi

    OLD_ESstats=$(cat ${Tmp}/buffer_${Node}_${Stats})
    echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
    echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
    DiffTotal=$(( ${Total} - $(echo -e "${OLD_ESstats}" | grep "Total=" | awk -F"=" '{print $2}') ))
    DiffTime=$(( ${Time} - $(echo -e "${OLD_ESstats}" | grep "Time=" | awk -F"=" '{print $2}') ))
    
    if (( ${DiffTotal} == 0 )) || (( ${DiffTime} == 0 )) ; then
         
        Result=0
        function_output
     
    else
            
        Result=`echo "scale=3; ${DiffTime}/${DiffTotal}" | bc -l | sed 's/^\./0./'`
        function_output
        
    fi
    
}

function_stats_search () {

    ESstats="$(curl -XGET 'http://127.0.0.1:'${Port}'/_nodes/'${Node}'/stats/indices/'${Stats}'?pretty=true' 2>/dev/null)"
    Total="$(echo -e "${ESstats}" | grep "query_total" | tail -n 1 | awk '{print $3}' | sed 's/,//')"
    Time="$(echo -e "${ESstats}" | grep "query_time_in_millis" | tail -n 1 | awk '{print $3}' | sed 's/,//')"

    test -s ${Tmp}/buffer_${Node}_${Stats}
    if [ "$?" != "0" ]; then
        echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
        echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
        echo "Buffer in progress..."
        exit 3
        
    fi

    OLD_ESstats=$(cat ${Tmp}/buffer_${Node}_${Stats})
    echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
    echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
    DiffTotal=$(( ${Total} - $(echo -e "${OLD_ESstats}" | grep "Total=" | awk -F"=" '{print $2}') ))
    DiffTime=$(( ${Time} - $(echo -e "${OLD_ESstats}" | grep "Time=" | awk -F"=" '{print $2}') ))

    if (( ${DiffTotal} == 0 )) || (( ${DiffTime} == 0 )) ; then
         
        Result=0
        function_output
     
    else
            
        Result=`echo "scale=3; ${DiffTime}/${DiffTotal}" | bc -l | sed 's/^\./0./'`
        function_output
        
    fi

}

function_stats_merge () {

    ESstats="$(curl -XGET 'http://127.0.0.1:'${Port}'/_nodes/'${Node}'/stats/indices/'${Stats}'?pretty=true' 2>/dev/null)"
    Total="$(echo -e "${ESstats}" | grep "\"total\"" | tail -n 1 | awk '{print $3}' | sed 's/,//')"
    Time="$(echo -e "${ESstats}" | grep "total_time_in_millis" | tail -n 1 | awk '{print $3}' | sed 's/,//')"

    test -s ${Tmp}/buffer_${Node}_${Stats}
    if [ "$?" != "0" ]; then
        echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
        echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
        echo "Buffer in progress..."
        exit 3
        
    fi

    OLD_ESstats=$(cat ${Tmp}/buffer_${Node}_${Stats})
    echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
    echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
    DiffTotal=$(( ${Total} - $(echo -e "${OLD_ESstats}" | grep "Total=" | awk -F"=" '{print $2}') ))
    DiffTime=$(( ${Time} - $(echo -e "${OLD_ESstats}" | grep "Time=" | awk -F"=" '{print $2}') ))

    if (( ${DiffTotal} == 0 )) || (( ${DiffTime} == 0 )) ; then
         
        Result=0
        function_output
     
    else
            
        Result=`echo "scale=3; ${DiffTime}/${DiffTotal}" | bc -l | sed 's/^\./0./'`
        function_output
        
    fi

}

function_stats_refresh () {

    ESstats="$(curl -XGET 'http://127.0.0.1:'${Port}'/_nodes/'${Node}'/stats/indices/'${Stats}'?pretty=true' 2>/dev/null)"
    Total="$(echo -e "${ESstats}" | grep "\"total\"" | tail -n 1 | awk '{print $3}' | sed 's/,//')"
    Time="$(echo -e "${ESstats}" | grep "total_time_in_millis" | tail -n 1 | awk '{print $3}' | sed 's/,//')"

    test -s ${Tmp}/buffer_${Node}_${Stats}
    if [ "$?" != "0" ]; then
        echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
        echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
        echo "Buffer in progress..."
        exit 3
        
    fi

    OLD_ESstats=$(cat ${Tmp}/buffer_${Node}_${Stats})
    echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
    echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
    DiffTotal=$(( ${Total} - $(echo -e "${OLD_ESstats}" | grep "Total=" | awk -F"=" '{print $2}') ))
    DiffTime=$(( ${Time} - $(echo -e "${OLD_ESstats}" | grep "Time=" | awk -F"=" '{print $2}') ))

    if (( ${DiffTotal} == 0 )) || (( ${DiffTime} == 0 )) ; then
         
        Result=0
        function_output
     
    else
            
        Result=`echo "scale=3; ${DiffTime}/${DiffTotal}" | bc -l | sed 's/^\./0./'`
        function_output
        
    fi

}

function_stats_flush () {

    ESstats="$(curl -XGET 'http://127.0.0.1:'${Port}'/_nodes/'${Node}'/stats/indices/'${Stats}'?pretty=true' 2>/dev/null)"
    Total="$(echo -e "${ESstats}" | grep "\"total\"" | tail -n 1 | awk '{print $3}' | sed 's/,//')"
    Time="$(echo -e "${ESstats}" | grep "total_time_in_millis" | tail -n 1 | awk '{print $3}' | sed 's/,//')"

    test -s ${Tmp}/buffer_${Node}_${Stats}
    if [ "$?" != "0" ]; then
        echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
        echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
        echo "Buffer in progress..."
        exit 3
        
    fi

    OLD_ESstats=$(cat ${Tmp}/buffer_${Node}_${Stats})
    echo "Total=${Total}" > ${Tmp}/buffer_${Node}_${Stats}
    echo "Time=${Time}" >> ${Tmp}/buffer_${Node}_${Stats}
    DiffTotal=$(( ${Total} - $(echo -e "${OLD_ESstats}" | grep "Total=" | awk -F"=" '{print $2}') ))
    DiffTime=$(( ${Time} - $(echo -e "${OLD_ESstats}" | grep "Time=" | awk -F"=" '{print $2}') ))

    if (( ${DiffTotal} == 0 )) || (( ${DiffTime} == 0 )) ; then
         
        Result=0
        function_output
     
    else
            
        Result=`echo "scale=3; ${DiffTime}/${DiffTotal}" | bc -l | sed 's/^\./0./'`
        function_output
        
    fi

}

#-------------------------------------------------------------------------------
# MAIN 
#-------------------------------------------------------------------------------
#> Handle command line options
doopts $@

#> Run processing
function_stats_${Stats}
